const express = require("express");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const bodyParser = require("body-parser");
const db = require('./database');
const cors = require("cors");

const app = express();
app.use(bodyParser.json());

const JWT_SECRET = "1478";

app.use(cors({
    origin: "http://localhost:3000",
    methods: "GET,POST,PUT,DELETE",
    allowedHeaders: "Content-Type,Authorization"
}));

// Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token
const verifyToken = (req, res, next) => {
    const token = req.headers["authorization"];
    if (!token) return res.status(403).json({ message: "No token provided" });

    jwt.verify(token.split(" ")[1], JWT_SECRET, (err, decoded) => {
        if (err) return res.status(401).json({ message: "Unauthorized" });
        req.user = decoded;
        next();
    });
};

const verifyAdmin = (req, res, next) => {
    if (req.user.role !== "admin") {
        return res.status(403).json({ message: "Access denied" });
    }
    next();
};

// üìå **1. ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤**
app.post("/register", (req, res) => {
    const { fullName, email, phone, address, password, status } = req.body;
    const hashPassword = bcrypt.hashSync(password, 8);

    db.query("INSERT INTO tb_customers (FullName, Email, Phone, Address, Password, Status) VALUES (?, ?, ?, ?, ?, ?)", 
    [fullName, email, phone, address, hashPassword, status], (err, result) => {
        if (err) return res.status(500).json({ error: err.message });
        res.json({ message: "Customer registered successfully" });
    });
});

// üìå **Login ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏¢‡∏Å User ‡πÅ‡∏•‡∏∞ Admin**
app.post("/login", (req, res) => {
    const { email, password } = req.body;

    db.query("SELECT * FROM tb_customers WHERE Email = ?", [email], (err, results) => {
        if(err){
            return res.status(500).json({message: "Database Error", error: err});
        }

        //‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if(results.length === 0){
            return res.status(401).json({message: "Invalid email or password"});
        }

        const user = results[0]; //‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const hashedPassword = user.Password;

        //‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if(!hashedPassword || !bcrypt.compareSync(password, hashedPassword)){
            return res.status(401).json({message: "Invalid email or password"});
        }

        //‡∏™‡∏£‡πâ‡∏≤‡∏á JWT_SECRET
        const token = jwt.sign(
            {id: user.CustomerID, email: user.Email},
            JWT_SECRET,
            {expiresIn: "2h"}
        );

        res.json({message: "Login Successful", token});
    });
});

// üìå **3. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (GET /products)**
app.get("/products", verifyToken, (req, res) => {
    db.query("SELECT * FROM tb_products", (err, results) => {
        if (err) return res.status(500).json({ error: err.message });
        res.json(results);
    });
});

// üìå **API ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Cart)**
app.post("/cart", (req, res) => {
    const { customerID, productId, quantity } = req.body;

    // ‡πÄ‡∏ä‡πá‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ null ‡∏´‡∏£‡∏∑‡∏≠ undefined
    if (!customerID || !productId || !quantity || quantity <= 0) {
        return res.status(400).json({ message: "Invalid input data" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    db.query(
        "SELECT * FROM tb_cart WHERE CustomerID = ? AND ProductID = ?",
        [customerID, productId],
        (err, results) => {
            if (err) return res.status(500).json({ error: err.message });

            if (results.length > 0) {
                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                db.query(
                    "UPDATE tb_cart SET Quantity = Quantity + ? WHERE CustomerID = ? AND ProductID = ?",
                    [quantity, customerID, productId],
                    (err) => {
                        if (err) return res.status(500).json({ error: err.message });
                        res.json({ message: "Cart updated successfully" });
                    }
                );
            } else {
                // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà
                db.query(
                    "INSERT INTO tb_cart (CustomerID, ProductID, Quantity) VALUES (?, ?, ?)",
                    [customerID, productId, quantity],
                    (err) => {
                        if (err) return res.status(500).json({ error: err.message });
                        res.json({ message: "Added to cart" });
                    }
                );
            }
        }
    );
});

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
app.get("/cart/:customerID", (req, res) => {
    const customerID = req.params.customerID;
    db.query(
        "SELECT c.CartID, p.ProductName, p.Price, c.Quantity FROM tb_cart c JOIN tb_products p ON c.ProductID = p.ProductID WHERE c.CustomerID = ?",
        [customerID],
        (err, results) => {
            if (err) return res.status(500).json({ error: err.message });
            res.json(results);
        }
    );
});

app.listen(5000, () => {
    console.log('Server running on port http://localhost:5000');
});
